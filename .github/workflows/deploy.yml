name: Deploy Slides to GitHub Pages
on:
  push:
    branches: [ main ]
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
     
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
       
    - name: Install dependencies
      run: npm ci
     
    - name: Auto-detect and build all slides
      run: |
        echo "=== Auto-detecting slides ==="
       
        # Find all slides.md files (existing pattern)
        slides_files=$(find . -path "*/pertemuan-*/slides.md" -not -path "*node_modules*" -not -path "*dist*" | sort)
        
        # Find SIMTA presentation.md (new pattern)
        simta_files=$(find . -path "*/SIMTA/presentation.md" -not -path "*node_modules*" -not -path "*dist*" | sort)
        
        # Combine both patterns
        all_files="$slides_files $simta_files"
       
        if [ -z "$all_files" ]; then
          echo "❌ No slides files found"
          echo "Expected structure: MK/pertemuan-XX/slides.md or SIMTA/presentation.md"
          find . -name "*.md" -not -path "*node_modules*" | head -10
          exit 1
        fi
       
        echo "Found slides:"
        echo "$all_files"
       
        # Create main dist directory
        mkdir -p dist
       
        # Build each slides file
        success_count=0
        total_count=0
        
        for slide_path in $all_files; do
          echo "=== Processing: $slide_path ==="
          total_count=$((total_count + 1))
         
          # Check if file exists and is not empty
          if [ ! -s "$slide_path" ]; then
            echo "⚠️  WARNING: $slide_path is empty or doesn't exist, skipping..."
            continue
          fi
         
          # Handle different patterns
          if [[ "$slide_path" == *"/SIMTA/presentation.md" ]]; then
            # SIMTA pattern
            mk="SIMTA"
            echo "MK: $mk (SIMTA Presentation)"
            
            # Build command for SIMTA
            echo "Building $mk..."
            if npx slidev build "SIMTA/presentation.md" \
              --base "/mata-kuliah-slides/SIMTA/" \
              --out "dist/SIMTA"; then
              
              # Verify build success
              if [ -f "dist/SIMTA/index.html" ]; then
                echo "✅ SUCCESS: $mk built successfully"
                success_count=$((success_count + 1))
              else
                echo "❌ FAILED: $mk build failed - no index.html generated"
              fi
            else
              echo "❌ FAILED: $mk build command failed"
            fi
            
          else
            # Standard pertemuan pattern
            mk=$(echo "$slide_path" | cut -d'/' -f2)
            pertemuan=$(echo "$slide_path" | cut -d'/' -f3)
           
            echo "MK: $mk, Pertemuan: $pertemuan"
            
            # Build command (standard pattern)
            echo "Building $mk/$pertemuan..."
            if npx slidev build "$mk/$pertemuan/slides.md" \
              --base "/mata-kuliah-slides/$mk/$pertemuan/" \
              --out "dist/$mk/$pertemuan"; then
              
              # Verify build success
              if [ -f "dist/$mk/$pertemuan/index.html" ]; then
                echo "✅ SUCCESS: $mk/$pertemuan built successfully"
                success_count=$((success_count + 1))
              else
                echo "❌ FAILED: $mk/$pertemuan build failed - no index.html generated"
              fi
            else
              echo "❌ FAILED: $mk/$pertemuan build command failed"
            fi
          fi
        done
       
        echo "=== Build Summary ==="
        echo "Total files processed: $total_count"
        echo "Successful builds: $success_count"
        echo "Failed builds: $((total_count - success_count))"
        
        # List successful builds
        echo "Successfully built slides:"
        find dist/ -name "index.html" | sort
        
        # Fail if no builds succeeded
        if [ $success_count -eq 0 ]; then
          echo "❌ No slides were successfully built!"
          exit 1
        fi
       
    - name: Copy landing page
      run: |
        if [ -f "docs/index.html" ]; then
          cp docs/index.html dist/
          echo "✅ Landing page copied"
        else
          echo "⚠️  No docs/index.html found, creating basic landing page..."
          cat > dist/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
          <title>Mata Kuliah Slides</title>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            h1 { color: #333; }
            .course { margin: 20px 0; }
            .course h2 { color: #666; }
            .special { margin: 30px 0; padding: 20px; background: #f0f8ff; border-radius: 8px; }
            .special h2 { color: #2563eb; }
            a { color: #0066cc; text-decoration: none; margin-right: 15px; }
            a:hover { text-decoration: underline; }
          </style>
        </head>
        <body>
          <h1>📚 Mata Kuliah Slides</h1>
          <p>Kumpulan presentasi slides untuk mata kuliah Sistem Informasi</p>
          
          <div class="special">
            <h2>🎓 SIMTA - Sistem Informasi Manajemen Tugas Akhir</h2>
            <a href="SIMTA/" target="_blank">📊 Presentation Slides</a>
          </div>
          
          <div class="course">
            <h2>🔗 DMJK - Dasar Manajemen Jaringan Komputer</h2>
            <div id="dmjk-links"></div>
          </div>
          
          <div class="course">
            <h2>☁️ CC - Cloud Computing</h2>
            <div id="cc-links"></div>
          </div>
          
          <div class="course">
            <h2>🌐 PROWEB - Pemrograman Web</h2>
            <div id="proweb-links"></div>
          </div>
          
          <div class="course">
            <h2>📱 PROMOB - Pemrograman Mobile</h2>
            <div id="promob-links"></div>
          </div>
          
          <script>
            // Auto-generate links based on available slides
            const courses = ['dmjk', 'cc', 'proweb', 'promob'];
            courses.forEach(course => {
              const container = document.getElementById(course + '-links');
              for(let i = 1; i <= 16; i++) {
                const num = i.toString().padStart(2, '0');
                const link = document.createElement('a');
                link.href = course.toUpperCase() + '/pertemuan-' + num + '/';
                link.textContent = 'Pertemuan ' + num;
                link.style.marginRight = '15px';
                link.target = '_blank';
                container.appendChild(link);
              }
            });
          </script>
        </body>
        </html>
        EOF
          echo "✅ Basic landing page created"
        fi
       
    - name: List all files before upload
      run: |
        echo "=== Final dist structure ==="
        find dist/ -type f | sort
       
    - name: Setup Pages
      uses: actions/configure-pages@v4
     
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4